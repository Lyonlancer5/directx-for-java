package com.fourthskyinteractive.dx4j.dxgi.adapter;

import static org.bridj.Pointer.allocate;
import static org.bridj.Pointer.allocatePointer;
import static org.bridj.Pointer.pointerTo;

import java.util.ArrayList;
import java.util.List;

import com.fourthskyinteractive.dx4j.util.Describable;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.ann.Virtual;
import org.bridj.cpp.com.COMRuntime;
import org.bridj.cpp.com.IID;
import org.bridj.cpp.com.IUnknown;

import com.fourthskyinteractive.dx4j.dxgi.DXGI;
import com.fourthskyinteractive.dx4j.dxgi.IDXGIObject;
import com.fourthskyinteractive.dx4j.windows.kernel32.LARGE_INTEGER;
/**
 * <i>native declaration : DXGI.h:1090</i><br>
 * Error: Conversion Error : uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e") novtable struct IDXGIObject {<br>
 * 	/// Original signature : <code>int SetPrivateData(const GUID&, UINT, const void*)</code><br>
 * 	virtual int SetPrivateData(const GUID& Name, UINT DataSize, const void* pData);<br>
 * 	/// Original signature : <code>int SetPrivateDataInterface(const GUID&, const IUnknown*)</code><br>
 * 	virtual int SetPrivateDataInterface(const GUID& Name, const IUnknown* pUnknown);<br>
 * 	/// Original signature : <code>int GetPrivateData(const GUID&, UINT*, void*)</code><br>
 * 	virtual int GetPrivateData(const GUID& Name, UINT* pDataSize, void* pData);<br>
 * 	/// Original signature : <code>int GetParent(const IID&, void**)</code><br>
 * 	virtual int GetParent(const IID& riid, void** ppParent);<br>
 * } (Cannot find parent IUnknown of struct uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e") novtable struct IDXGIObject {<br>
 * 	/// Original signature : <code>int SetPrivateData(const GUID&, UINT, const void*)</code><br>
 * 	virtual int SetPrivateData(const GUID& Name, UINT DataSize, const void* pData);<br>
 * 	/// Original signature : <code>int SetPrivateDataInterface(const GUID&, const IUnknown*)</code><br>
 * 	virtual int SetPrivateDataInterface(const GUID& Name, const IUnknown* pUnknown);<br>
 * 	/// Original signature : <code>int GetPrivateData(const GUID&, UINT*, void*)</code><br>
 * 	virtual int GetPrivateData(const GUID& Name, UINT* pDataSize, void* pData);<br>
 * 	/// Original signature : <code>int GetParent(const IID&, void**)</code><br>
 * 	virtual int GetParent(const IID& riid, void** ppParent);<br>
 * })<br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@IID("2411e7e1-12ac-4ccf-bd14-9798e8534dc0") 
@Library("dxgi") 
@Runtime(COMRuntime.class)
public class IDXGIAdapter extends IDXGIObject implements Describable {
	public IDXGIAdapter() {
		super();
	}
//	public IDXGIAdapter(Pointer pointer) {
//		super(pointer);
//	}
	@Deprecated @Virtual(0) 
	public native int EnumOutputs(int Output, Pointer<Pointer<IDXGIOutput > > ppOutput);
	@Virtual(1) 
	public native int GetDesc(Pointer<DXGI_ADAPTER_DESC> pDesc);
	@Deprecated @Virtual(2) 
	public native int CheckInterfaceSupport(Pointer<Byte> InterfaceName, Pointer<LARGE_INTEGER> pUMDVersion);
	
	public <I extends IUnknown> long CheckInterfaceSupport(Class<I> type) {
		Pointer<Byte> pGUID = COMRuntime.getIID(type);
		LARGE_INTEGER LInteger = new LARGE_INTEGER();
		
		int result = this.CheckInterfaceSupport(pGUID, pointerTo(LInteger));
		if (result != 0) {
			return -1;
		}
		
		long ret = (long)(LInteger.HighPart()) << 32 | LInteger.LowPart();
		return ret;
	}
	
	public List<IDXGIOutput> EnumOutputs() {
		List<IDXGIOutput> outputs = new ArrayList<IDXGIOutput>();
		Pointer<Pointer<IDXGIOutput>> pp = allocatePointer(IDXGIOutput.class);
		
		try {
			int i = 0;
			while (this.EnumOutputs(i, pp) != DXGI.DXGI_ERROR_NOT_FOUND) {
				outputs.add(pp.get().getNativeObject(IDXGIOutput.class));				
				i++;
			}			
			
		} finally {
			pp.release();
			pp = null;
		}
		
		return outputs;
	}

    @Override
    public DXGI_ADAPTER_DESC GetDesc() {
        Pointer<DXGI_ADAPTER_DESC> pDesc = null;

        try {
            pDesc = allocate(DXGI_ADAPTER_DESC.class);
            this.GetDesc(pDesc);
            return pDesc.get();
        } finally {
            if (pDesc != null)
                pDesc.release();
        }
    }
}
