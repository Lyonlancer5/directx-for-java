package com.fourthskyinteractive.dx4j.dxgi.device;

import static org.bridj.Pointer.allocate;
import static org.bridj.Pointer.allocateInt;
import static org.bridj.Pointer.allocatePointer;
import static org.bridj.Pointer.pointerTo;
import static org.bridj.Pointer.pointerToPointer;

import com.fourthskyinteractive.dx4j.util.Describable;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.ann.Virtual;
import org.bridj.cpp.com.COMRuntime;
import org.bridj.cpp.com.IID;
import org.bridj.cpp.com.IUnknown;

import com.fourthskyinteractive.dx4j.dxgi.DXGI.DXGI_FORMAT;
import com.fourthskyinteractive.dx4j.dxgi.DXGIException;
import com.fourthskyinteractive.dx4j.dxgi.DXGI_MODE_DESC;
import com.fourthskyinteractive.dx4j.dxgi.adapter.DXGI_FRAME_STATISTICS;
import com.fourthskyinteractive.dx4j.dxgi.adapter.IDXGIOutput;
/**
 * <i>native declaration : DXGI.h:1536</i><br>
 * Error: Conversion Error : uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e") novtable struct IDXGIObject {<br>
 * 	/// Original signature : <code>int SetPrivateData(const GUID&, UINT, const void*)</code><br>
 * 	virtual int SetPrivateData(const GUID& Name, UINT DataSize, const void* pData);<br>
 * 	/// Original signature : <code>int SetPrivateDataInterface(const GUID&, const IUnknown*)</code><br>
 * 	virtual int SetPrivateDataInterface(const GUID& Name, const IUnknown* pUnknown);<br>
 * 	/// Original signature : <code>int GetPrivateData(const GUID&, UINT*, void*)</code><br>
 * 	virtual int GetPrivateData(const GUID& Name, UINT* pDataSize, void* pData);<br>
 * 	/// Original signature : <code>int GetParent(const IID&, void**)</code><br>
 * 	virtual int GetParent(const IID& riid, void** ppParent);<br>
 * } (Cannot find parent IUnknown of struct uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e") novtable struct IDXGIObject {<br>
 * 	/// Original signature : <code>int SetPrivateData(const GUID&, UINT, const void*)</code><br>
 * 	virtual int SetPrivateData(const GUID& Name, UINT DataSize, const void* pData);<br>
 * 	/// Original signature : <code>int SetPrivateDataInterface(const GUID&, const IUnknown*)</code><br>
 * 	virtual int SetPrivateDataInterface(const GUID& Name, const IUnknown* pUnknown);<br>
 * 	/// Original signature : <code>int GetPrivateData(const GUID&, UINT*, void*)</code><br>
 * 	virtual int GetPrivateData(const GUID& Name, UINT* pDataSize, void* pData);<br>
 * 	/// Original signature : <code>int GetParent(const IID&, void**)</code><br>
 * 	virtual int GetParent(const IID& riid, void** ppParent);<br>
 * })<br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@IID("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a") 
@Library("dxgi") 
@Runtime(COMRuntime.class)
public class IDXGISwapChain extends IDXGIDeviceSubObject implements Describable {
	public IDXGISwapChain() {
		super();
	}
//	public IDXGISwapChain(Pointer pointer) {
//		super(pointer);
//	}
	@Virtual(0) 
	public native int Present(int SyncInterval, int Flags);
	@Deprecated @Virtual(1) 
	public native int GetBuffer(int Buffer, Pointer<Byte> riid, Pointer<Pointer<? > > ppSurface);
	@Deprecated @Virtual(2) 
	public native int SetFullscreenState(int Fullscreen, Pointer<IDXGIOutput > pTarget);
	@Deprecated @Virtual(3) 
	public native int GetFullscreenState(Pointer<Integer > pFullscreen, Pointer<Pointer<IDXGIOutput > > ppTarget);
	@Virtual(4) 
	public native int GetDesc(Pointer<DXGI_SWAP_CHAIN_DESC> pDesc);
	@Virtual(5)
	public native int ResizeBuffers(int BufferCount, int Width, int Height, DXGI_FORMAT NewFormat, int SwapChainFlags);
	@Deprecated @Virtual(6) 
	public native int ResizeTarget(Pointer<DXGI_MODE_DESC> pNewTargetParameters);
	@Deprecated @Virtual(7) 
	public native int GetContainingOutput(Pointer<Pointer<IDXGIOutput > > ppOutput);
	@Deprecated @Virtual(8) 
	public native int GetFrameStatistics(Pointer<DXGI_FRAME_STATISTICS > pStats);
	@Deprecated @Virtual(9) 
	public native int GetLastPresentCount(Pointer<Integer > pLastPresentCount);
	
	// "Javanized" methods
	public <T extends IUnknown> T GetBuffer(int Buffer, Class<T> bufferClass) throws DXGIException {
		// Get GUID of class
		Pointer<Byte> guid = COMRuntime.getIID(bufferClass);
		
		// Get back buffer pointer
		Pointer<Pointer<?>> pp = allocatePointer();
		
		try {
			int result = this.GetBuffer(Buffer, guid, pp);
			if(result != 0) {
				throw new DXGIException(result);
			}
			
			return pp.get().getNativeObject(bufferClass);
			
		} finally {
			pp.release();
		}
	}
	
	public final int GetLastPresentCount() throws DXGIException {
		Pointer<Integer> pp = allocate(Integer.class);
		try {
			int result = this.GetLastPresentCount(pp);
			if(result != 0) {
				throw new DXGIException(result);
			}
			
			return pp.get();
		} finally {
			pp.release();
		}
	}
	
	public final DXGI_FRAME_STATISTICS GetFrameStatistics() throws DXGIException {
		DXGI_FRAME_STATISTICS stats = new DXGI_FRAME_STATISTICS();
		int result = this.GetFrameStatistics(pointerTo(stats));
		if(result != 0) {
			throw new DXGIException(result);
		}
		
		return stats;
	}
	
	public final IDXGIOutput GetContainingOutput() throws DXGIException {
		Pointer<Pointer<IDXGIOutput>> pp = allocatePointer(IDXGIOutput.class);
		try {
			int result = this.GetContainingOutput(pp);
			if(result != 0) {
				throw new DXGIException(result);
			}
			
			return pp.get().getNativeObject(IDXGIOutput.class);
		} finally {
			pp.release();
		}
	}
	
	public final void ResizeTarget(DXGI_MODE_DESC newTargetParameters) throws DXGIException {
		int result = this.ResizeTarget(pointerTo(newTargetParameters));
		if(result != 0) {
			throw new DXGIException(result);
		}
	}
	
	public final void SetFullscreenState(int Fullscreen, IDXGIOutput target) throws DXGIException {
		int result = this.SetFullscreenState(Fullscreen, pointerTo(target));
		if(result != 0) {
			throw new DXGIException(result);
		}
	}
	
	public final boolean GetFullscreenState(IDXGIOutput target) throws DXGIException {
		Pointer<Integer> pInt = allocateInt();
		try {
			int result = this.GetFullscreenState(pInt, pointerToPointer(pointerTo(target)));
			if(result != 0) {
				throw new DXGIException(result);
			}
			
			return pInt.get() > 0 ? true : false;
		} finally {
			pInt.release();
		}
	}

    @SuppressWarnings("unchecked")
	@Override
    public DXGI_SWAP_CHAIN_DESC GetDesc() {
        Pointer<DXGI_SWAP_CHAIN_DESC> pDesc = null;

        try {
            pDesc = allocate(DXGI_SWAP_CHAIN_DESC.class);
            this.GetDesc(pDesc);
            return pDesc.get();
        } finally {
            if (pDesc != null)
                pDesc.release();
        }
    }
}
