package com.fourthskyinteractive.dx4j.d3d11.states;

import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Array;
import org.bridj.ann.Field;

import com.fourthskyinteractive.dx4j.d3d11.D3D11;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D11_COMPARISON_FUNC;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D11_FILTER;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D11_TEXTURE_ADDRESS_MODE;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */ 
public class D3D11_SAMPLER_DESC extends StructObject {
	public D3D11_SAMPLER_DESC() {
		super();
		this.Filter(D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR)
			.AddressU(D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_CLAMP)
			.AddressV(D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_CLAMP)
			.AddressW(D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_CLAMP)
			.MinLOD(Float.MIN_VALUE)
			.MaxLOD(Float.MAX_VALUE)
			.MipLODBias(0.0f)
			.MaxAnisotropy(16)
			.ComparisonFunc(D3D11_COMPARISON_FUNC.D3D11_COMPARISON_NEVER);
		this.BorderColor().setArray(new float[] { 0.0f, 0.0f, 0.0f, 0.0f });
	}
	public D3D11_SAMPLER_DESC(Pointer pointer) {
		super(pointer);
	}
	/// C type : D3D11_FILTER
	@Field(0) 
	public ValuedEnum<D3D11_FILTER> Filter() {
		return this.io.getEnumField(this, 0);
	}
	/// C type : D3D11_FILTER
	@Field(0) 
	public D3D11_SAMPLER_DESC Filter(ValuedEnum<D3D11_FILTER > Filter) {
		this.io.setEnumField(this, 0, Filter);
		return this;
	}
	/// C type : D3D11_TEXTURE_ADDRESS_MODE
	@Field(1) 
	public ValuedEnum<D3D11_TEXTURE_ADDRESS_MODE > AddressU() {
		return this.io.getEnumField(this, 1);
	}
	/// C type : D3D11_TEXTURE_ADDRESS_MODE
	@Field(1) 
	public D3D11_SAMPLER_DESC AddressU(ValuedEnum<D3D11_TEXTURE_ADDRESS_MODE > AddressU) {
		this.io.setEnumField(this, 1, AddressU);
		return this;
	}
	/// C type : D3D11_TEXTURE_ADDRESS_MODE
	@Field(2) 
	public ValuedEnum<D3D11_TEXTURE_ADDRESS_MODE > AddressV() {
		return this.io.getEnumField(this, 2);
	}
	/// C type : D3D11_TEXTURE_ADDRESS_MODE
	@Field(2) 
	public D3D11_SAMPLER_DESC AddressV(ValuedEnum<D3D11_TEXTURE_ADDRESS_MODE > AddressV) {
		this.io.setEnumField(this, 2, AddressV);
		return this;
	}
	/// C type : D3D11_TEXTURE_ADDRESS_MODE
	@Field(3) 
	public ValuedEnum<D3D11_TEXTURE_ADDRESS_MODE > AddressW() {
		return this.io.getEnumField(this, 3);
	}
	/// C type : D3D11_TEXTURE_ADDRESS_MODE
	@Field(3) 
	public D3D11_SAMPLER_DESC AddressW(ValuedEnum<D3D11_TEXTURE_ADDRESS_MODE > AddressW) {
		this.io.setEnumField(this, 3, AddressW);
		return this;
	}
	@Field(4) 
	public float MipLODBias() {
		return this.io.getFloatField(this, 4);
	}
	@Field(4) 
	public D3D11_SAMPLER_DESC MipLODBias(float MipLODBias) {
		this.io.setFloatField(this, 4, MipLODBias);
		return this;
	}
	@Field(5) 
	public int MaxAnisotropy() {
		return this.io.getIntField(this, 5);
	}
	@Field(5) 
	public D3D11_SAMPLER_DESC MaxAnisotropy(int MaxAnisotropy) {
		this.io.setIntField(this, 5, MaxAnisotropy);
		return this;
	}
	/// C type : D3D11_COMPARISON_FUNC
	@Field(6) 
	public ValuedEnum<D3D11_COMPARISON_FUNC > ComparisonFunc() {
		return this.io.getEnumField(this, 6);
	}
	/// C type : D3D11_COMPARISON_FUNC
	@Field(6) 
	public D3D11_SAMPLER_DESC ComparisonFunc(ValuedEnum<D3D11_COMPARISON_FUNC > ComparisonFunc) {
		this.io.setEnumField(this, 6, ComparisonFunc);
		return this;
	}
	/// C type : FLOAT[4]
	@Array({4}) 
	@Field(7) 
	public Pointer<Float > BorderColor() {
		return this.io.getPointerField(this, 7);
	}
	@Field(8) 
	public float MinLOD() {
		return this.io.getFloatField(this, 8);
	}
	@Field(8) 
	public D3D11_SAMPLER_DESC MinLOD(float MinLOD) {
		this.io.setFloatField(this, 8, MinLOD);
		return this;
	}
	@Field(9) 
	public float MaxLOD() {
		return this.io.getFloatField(this, 9);
	}
	@Field(9) 
	public D3D11_SAMPLER_DESC MaxLOD(float MaxLOD) {
		this.io.setFloatField(this, 9, MaxLOD);
		return this;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (int)Filter().value(); 
		result = prime * result + (int)AddressU().value(); 
		result = prime * result + (int)AddressV().value(); 
		result = prime * result + (int)AddressW().value(); 
		result = prime * result + Float.floatToIntBits(MipLODBias());
		result = prime * result + MaxAnisotropy();
		result = prime * result + (int)ComparisonFunc().value(); 
	
		for(float f : BorderColor()) {
			result = prime * result + Float.floatToIntBits(f);
		}				

		result = prime * result + Float.floatToIntBits(MinLOD()); 
		result = prime * result + Float.floatToIntBits(MaxLOD());
		
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		if(hashCode() != obj.hashCode()) 
			return false;
		
		return true;
	}	
}
