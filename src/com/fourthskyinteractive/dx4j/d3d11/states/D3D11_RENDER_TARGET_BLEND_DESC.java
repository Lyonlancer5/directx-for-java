package com.fourthskyinteractive.dx4j.d3d11.states;

import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Field;

import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D11_BLEND;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D11_BLEND_OP;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
public class D3D11_RENDER_TARGET_BLEND_DESC extends StructObject {
	public D3D11_RENDER_TARGET_BLEND_DESC() {
		super();
	}
	public D3D11_RENDER_TARGET_BLEND_DESC(Pointer<? extends StructObject> pointer) {
		super(pointer);
	}
	@Field(0) 
	public int BlendEnable() {
		return this.io.getIntField(this, 0);
	}
	@Field(0) 
	public D3D11_RENDER_TARGET_BLEND_DESC BlendEnable(int BlendEnable) {
		this.io.setIntField(this, 0, BlendEnable);
		return this;
	}
	/// C type : D3D11_BLEND
	@Field(1) 
	public ValuedEnum<D3D11_BLEND > SrcBlend() {
		return this.io.getEnumField(this, 1);
	}
	/// C type : D3D11_BLEND
	@Field(1) 
	public D3D11_RENDER_TARGET_BLEND_DESC SrcBlend(ValuedEnum<D3D11_BLEND > SrcBlend) {
		this.io.setEnumField(this, 1, SrcBlend);
		return this;
	}
	/// C type : D3D11_BLEND
	@Field(2) 
	public ValuedEnum<D3D11_BLEND > DestBlend() {
		return this.io.getEnumField(this, 2);
	}
	/// C type : D3D11_BLEND
	@Field(2) 
	public D3D11_RENDER_TARGET_BLEND_DESC DestBlend(ValuedEnum<D3D11_BLEND > DestBlend) {
		this.io.setEnumField(this, 2, DestBlend);
		return this;
	}
	/// C type : D3D11_BLEND_OP
	@Field(3) 
	public ValuedEnum<D3D11_BLEND_OP > BlendOp() {
		return this.io.getEnumField(this, 3);
	}
	/// C type : D3D11_BLEND_OP
	@Field(3) 
	public D3D11_RENDER_TARGET_BLEND_DESC BlendOp(ValuedEnum<D3D11_BLEND_OP > BlendOp) {
		this.io.setEnumField(this, 3, BlendOp);
		return this;
	}
	/// C type : D3D11_BLEND
	@Field(4) 
	public ValuedEnum<D3D11_BLEND > SrcBlendAlpha() {
		return this.io.getEnumField(this, 4);
	}
	/// C type : D3D11_BLEND
	@Field(4) 
	public D3D11_RENDER_TARGET_BLEND_DESC SrcBlendAlpha(ValuedEnum<D3D11_BLEND > SrcBlendAlpha) {
		this.io.setEnumField(this, 4, SrcBlendAlpha);
		return this;
	}
	/// C type : D3D11_BLEND
	@Field(5) 
	public ValuedEnum<D3D11_BLEND > DestBlendAlpha() {
		return this.io.getEnumField(this, 5);
	}
	/// C type : D3D11_BLEND
	@Field(5) 
	public D3D11_RENDER_TARGET_BLEND_DESC DestBlendAlpha(ValuedEnum<D3D11_BLEND > DestBlendAlpha) {
		this.io.setEnumField(this, 5, DestBlendAlpha);
		return this;
	}
	/// C type : D3D11_BLEND_OP
	@Field(6) 
	public ValuedEnum<D3D11_BLEND_OP > BlendOpAlpha() {
		return this.io.getEnumField(this, 6);
	}
	/// C type : D3D11_BLEND_OP
	@Field(6) 
	public D3D11_RENDER_TARGET_BLEND_DESC BlendOpAlpha(ValuedEnum<D3D11_BLEND_OP > BlendOpAlpha) {
		this.io.setEnumField(this, 6, BlendOpAlpha);
		return this;
	}
	/// C type : UINT8
	@Field(7) 
	public byte RenderTargetWriteMask() {
		return this.io.getByteField(this, 7);
	}
	/// C type : UINT8
	@Field(7) 
	public D3D11_RENDER_TARGET_BLEND_DESC RenderTargetWriteMask(byte RenderTargetWriteMask) {
		this.io.setByteField(this, 7, RenderTargetWriteMask);
		return this;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + BlendEnable(); 
		long h = SrcBlend().value();
		result = prime * result + (int)(h ^(h >>> 32)); 
		h = DestBlend().value();
		result = prime * result + (int)(h ^(h >>> 32)); 
		h = BlendOp().value();
		result = prime * result + (int)(h ^(h >>> 32));
		h = SrcBlendAlpha().value();
		result = prime * result + (int)(h ^(h >>> 32));
		h = DestBlendAlpha().value();
		result = prime * result + (int)(h ^(h >>> 32));
		h = BlendOpAlpha().value();
		result = prime * result + (int)(h ^(h >>> 32));
		result = prime * result + RenderTargetWriteMask();
		
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		if(hashCode() != obj.hashCode()) 
			return false;
		
		return true;
	}
}
