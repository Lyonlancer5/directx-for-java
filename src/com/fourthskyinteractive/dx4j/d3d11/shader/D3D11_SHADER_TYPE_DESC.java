package com.fourthskyinteractive.dx4j.d3d11.shader;

import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_SHADER_VARIABLE_CLASS;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_SHADER_VARIABLE_TYPE;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("d3dcompiler") 
public class D3D11_SHADER_TYPE_DESC extends StructObject {
	public D3D11_SHADER_TYPE_DESC() {
		super();
	}
	public D3D11_SHADER_TYPE_DESC(Pointer pointer) {
		super(pointer);
	}
	
	/**
	 * Variable class (e.g. matrix, vector, etc.)<br>
	 * C type : D3D_SHADER_VARIABLE_TYPE
	 */
	@Field(0) 
	public ValuedEnum<D3D_SHADER_VARIABLE_CLASS > Class() {
		return this.io.getEnumField(this, 0);
	}
	/**
	 * Variable type (e.g. matrix, vecto, etc.)<br>
	 * C type : D3D_SHADER_VARIABLE_TYPE
	 */
	@Field(0) 
	public D3D11_SHADER_TYPE_DESC Class(ValuedEnum<D3D_SHADER_VARIABLE_CLASS > Class) {
		this.io.setEnumField(this, 0, Class);
		return this;
	}
	
	/**
	 * Variable type (e.g. float, sampler, etc.)<br>
	 * C type : D3D_SHADER_VARIABLE_TYPE
	 */
	@Field(1) 
	public ValuedEnum<D3D_SHADER_VARIABLE_TYPE > Type() {
		return this.io.getEnumField(this, 1);
	}
	/**
	 * Variable type (e.g. float, sampler, etc.)<br>
	 * C type : D3D_SHADER_VARIABLE_TYPE
	 */
	@Field(1) 
	public D3D11_SHADER_TYPE_DESC Type(ValuedEnum<D3D_SHADER_VARIABLE_TYPE > Type) {
		this.io.setEnumField(this, 1, Type);
		return this;
	}
	/// Number of rows (for matrices, 1 for other numeric, 0 if not applicable)
	@Field(2) 
	public int Rows() {
		return this.io.getIntField(this, 2);
	}
	/// Number of rows (for matrices, 1 for other numeric, 0 if not applicable)
	@Field(2) 
	public D3D11_SHADER_TYPE_DESC Rows(int Rows) {
		this.io.setIntField(this, 2, Rows);
		return this;
	}
	/// Number of columns (for vectors & matrices, 1 for other numeric, 0 if not applicable)
	@Field(3) 
	public int Columns() {
		return this.io.getIntField(this, 3);
	}
	/// Number of columns (for vectors & matrices, 1 for other numeric, 0 if not applicable)
	@Field(3) 
	public D3D11_SHADER_TYPE_DESC Columns(int Columns) {
		this.io.setIntField(this, 3, Columns);
		return this;
	}
	/// Number of elements (0 if not an array)
	@Field(4) 
	public int Elements() {
		return this.io.getIntField(this, 4);
	}
	/// Number of elements (0 if not an array)
	@Field(4) 
	public D3D11_SHADER_TYPE_DESC Elements(int Elements) {
		this.io.setIntField(this, 4, Elements);
		return this;
	}
	/// Number of members (0 if not a structure)
	@Field(5) 
	public int Members() {
		return this.io.getIntField(this, 5);
	}
	/// Number of members (0 if not a structure)
	@Field(5) 
	public D3D11_SHADER_TYPE_DESC Members(int Members) {
		this.io.setIntField(this, 5, Members);
		return this;
	}
	/// Offset from the start of structure (0 if not a structure member)
	@Field(6) 
	public int Offset() {
		return this.io.getIntField(this, 6);
	}
	/// Offset from the start of structure (0 if not a structure member)
	@Field(6) 
	public D3D11_SHADER_TYPE_DESC Offset(int Offset) {
		this.io.setIntField(this, 6, Offset);
		return this;
	}
	/**
	 * Name of type, can be NULL<br>
	 * C type : LPCSTR
	 */
	@Field(7) 
	public Pointer<Byte > Name() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * Name of type, can be NULL<br>
	 * C type : LPCSTR
	 */
	@Field(7) 
	public D3D11_SHADER_TYPE_DESC Name(Pointer<Byte > Name) {
		this.io.setPointerField(this, 7, Name);
		return this;
	}
}

