package com.fourthskyinteractive.dx4j.d3d11.shader;

import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("d3dcompiler") 
public class D3D11_SHADER_VARIABLE_DESC extends StructObject {
	public D3D11_SHADER_VARIABLE_DESC() {
		super();
	}
	public D3D11_SHADER_VARIABLE_DESC(Pointer<? extends StructObject> pointer) {
		super(pointer);
	}
	/**
	 * Name of the variable<br>
	 * C type : LPCSTR
	 */
	@Field(0) 
	public Pointer<Byte > Name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Name of the variable<br>
	 * C type : LPCSTR
	 */
	@Field(0) 
	public D3D11_SHADER_VARIABLE_DESC Name(Pointer<Byte > Name) {
		this.io.setPointerField(this, 0, Name);
		return this;
	}
	/// Offset in constant buffer's backing store
	@Field(1) 
	public int StartOffset() {
		return this.io.getIntField(this, 1);
	}
	/// Offset in constant buffer's backing store
	@Field(1) 
	public D3D11_SHADER_VARIABLE_DESC StartOffset(int StartOffset) {
		this.io.setIntField(this, 1, StartOffset);
		return this;
	}
	/// Size of variable (in bytes)
	@Field(2) 
	public int Size() {
		return this.io.getIntField(this, 2);
	}
	/// Size of variable (in bytes)
	@Field(2) 
	public D3D11_SHADER_VARIABLE_DESC Size(int Size) {
		this.io.setIntField(this, 2, Size);
		return this;
	}
	/// Variable flags
	@Field(3) 
	public int uFlags() {
		return this.io.getIntField(this, 3);
	}
	/// Variable flags
	@Field(3) 
	public D3D11_SHADER_VARIABLE_DESC uFlags(int uFlags) {
		this.io.setIntField(this, 3, uFlags);
		return this;
	}
	/**
	 * Raw pointer to default value<br>
	 * C type : LPVOID
	 */
	@Field(4) 
	public Pointer<? > DefaultValue() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * Raw pointer to default value<br>
	 * C type : LPVOID
	 */
	@Field(4) 
	public D3D11_SHADER_VARIABLE_DESC DefaultValue(Pointer<? > DefaultValue) {
		this.io.setPointerField(this, 4, DefaultValue);
		return this;
	}
	/// First texture index (or -1 if no textures used)
	@Field(5) 
	public int StartTexture() {
		return this.io.getIntField(this, 5);
	}
	/// First texture index (or -1 if no textures used)
	@Field(5) 
	public D3D11_SHADER_VARIABLE_DESC StartTexture(int StartTexture) {
		this.io.setIntField(this, 5, StartTexture);
		return this;
	}
	/// Number of texture slots possibly used.
	@Field(6) 
	public int TextureSize() {
		return this.io.getIntField(this, 6);
	}
	/// Number of texture slots possibly used.
	@Field(6) 
	public D3D11_SHADER_VARIABLE_DESC TextureSize(int TextureSize) {
		this.io.setIntField(this, 6, TextureSize);
		return this;
	}
	/// First sampler index (or -1 if no textures used)
	@Field(7) 
	public int StartSampler() {
		return this.io.getIntField(this, 7);
	}
	/// First sampler index (or -1 if no textures used)
	@Field(7) 
	public D3D11_SHADER_VARIABLE_DESC StartSampler(int StartSampler) {
		this.io.setIntField(this, 7, StartSampler);
		return this;
	}
	/// Number of sampler slots possibly used.
	@Field(8) 
	public int SamplerSize() {
		return this.io.getIntField(this, 8);
	}
	/// Number of sampler slots possibly used.
	@Field(8) 
	public D3D11_SHADER_VARIABLE_DESC SamplerSize(int SamplerSize) {
		this.io.setIntField(this, 8, SamplerSize);
		return this;
	}
}
