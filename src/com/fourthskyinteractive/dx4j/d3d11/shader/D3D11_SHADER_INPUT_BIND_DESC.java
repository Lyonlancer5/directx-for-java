package com.fourthskyinteractive.dx4j.d3d11.shader;

import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_RESOURCE_RETURN_TYPE;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_SHADER_INPUT_TYPE;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_SRV_DIMENSION;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("d3d11") 
public class D3D11_SHADER_INPUT_BIND_DESC extends StructObject {
	public D3D11_SHADER_INPUT_BIND_DESC() {
		super();
	}
	public D3D11_SHADER_INPUT_BIND_DESC(Pointer pointer) {
		super(pointer);
	}
	/**
	 * Name of the resource<br>
	 * C type : LPCSTR
	 */
	@Field(0) 
	public Pointer<Byte > Name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Name of the resource<br>
	 * C type : LPCSTR
	 */
	@Field(0) 
	public D3D11_SHADER_INPUT_BIND_DESC Name(Pointer<Byte > Name) {
		this.io.setPointerField(this, 0, Name);
		return this;
	}
	
	@Field(1)
	public ValuedEnum<D3D_SHADER_INPUT_TYPE> Type() {
		return this.io.getEnumField(this, 1);
	}
	
	@Field(1)
	public D3D11_SHADER_INPUT_BIND_DESC Type(ValuedEnum<D3D_SHADER_INPUT_TYPE> Type) {
		this.io.setEnumField(this, 1, Type);
		return this;
	}
	
	/// Starting bind point
	@Field(2) 
	public int BindPoint() {
		return this.io.getIntField(this, 2);
	}
	/// Starting bind point
	@Field(2) 
	public D3D11_SHADER_INPUT_BIND_DESC BindPoint(int BindPoint) {
		this.io.setIntField(this, 2, BindPoint);
		return this;
	}
	/// Number of contiguous bind points (for arrays)
	@Field(3) 
	public int BindCount() {
		return this.io.getIntField(this, 3);
	}
	/// Number of contiguous bind points (for arrays)
	@Field(3) 
	public D3D11_SHADER_INPUT_BIND_DESC BindCount(int BindCount) {
		this.io.setIntField(this, 3, BindCount);
		return this;
	}
	/// Input binding flags
	@Field(4) 
	public int uFlags() {
		return this.io.getIntField(this, 4);
	}
	/// Input binding flags
	@Field(4) 
	public D3D11_SHADER_INPUT_BIND_DESC uFlags(int uFlags) {
		this.io.setIntField(this, 4, uFlags);
		return this;
	}
	/**
	 * Return type (if texture)<br>
	 * C type : D3D_RESOURCE_RETURN_TYPE
	 */
	@Field(5) 
	public ValuedEnum<D3D_RESOURCE_RETURN_TYPE > ReturnType() {
		return this.io.getEnumField(this, 5);
	}
	/**
	 * Return type (if texture)<br>
	 * C type : D3D_RESOURCE_RETURN_TYPE
	 */
	@Field(5) 
	public D3D11_SHADER_INPUT_BIND_DESC ReturnType(ValuedEnum<D3D_RESOURCE_RETURN_TYPE > ReturnType) {
		this.io.setEnumField(this, 5, ReturnType);
		return this;
	}
	/**
	 * Dimension (if texture)<br>
	 * C type : D3D_SRV_DIMENSION
	 */
	@Field(6) 
	public ValuedEnum<D3D_SRV_DIMENSION > Dimension() {
		return this.io.getEnumField(this, 6);
	}
	/**
	 * Dimension (if texture)<br>
	 * C type : D3D_SRV_DIMENSION
	 */
	@Field(6) 
	public D3D11_SHADER_INPUT_BIND_DESC Dimension(ValuedEnum<D3D_SRV_DIMENSION > Dimension) {
		this.io.setEnumField(this, 6, Dimension);
		return this;
	}
	/// Number of samples (0 if not MS texture)
	@Field(7) 
	public int NumSamples() {
		return this.io.getIntField(this, 7);
	}
	/// Number of samples (0 if not MS texture)
	@Field(7) 
	public D3D11_SHADER_INPUT_BIND_DESC NumSamples(int NumSamples) {
		this.io.setIntField(this, 7, NumSamples);
		return this;
	}
}
