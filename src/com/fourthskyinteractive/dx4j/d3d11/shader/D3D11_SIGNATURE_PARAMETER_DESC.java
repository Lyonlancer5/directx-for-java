package com.fourthskyinteractive.dx4j.d3d11.shader;

import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_NAME;
import com.fourthskyinteractive.dx4j.d3d11.D3D11.D3D_REGISTER_COMPONENT_TYPE;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("d3dcompiler") 
public class D3D11_SIGNATURE_PARAMETER_DESC extends StructObject {
	public D3D11_SIGNATURE_PARAMETER_DESC() {
		super();
	}
	public D3D11_SIGNATURE_PARAMETER_DESC(Pointer<? extends StructObject> pointer) {
		super(pointer);
	}
	/**
	 * Name of the semantic<br>
	 * C type : LPCSTR
	 */
	@Field(0) 
	public Pointer<Byte > SemanticName() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Name of the semantic<br>
	 * C type : LPCSTR
	 */
	@Field(0) 
	public D3D11_SIGNATURE_PARAMETER_DESC SemanticName(Pointer<Byte > SemanticName) {
		this.io.setPointerField(this, 0, SemanticName);
		return this;
	}
	/// Index of the semantic
	@Field(1) 
	public int SemanticIndex() {
		return this.io.getIntField(this, 1);
	}
	/// Index of the semantic
	@Field(1) 
	public D3D11_SIGNATURE_PARAMETER_DESC SemanticIndex(int SemanticIndex) {
		this.io.setIntField(this, 1, SemanticIndex);
		return this;
	}
	
	/// Index of the semantic
	@Field(2) 
	public int Register() {
		return this.io.getIntField(this, 2);
	}
	/// Index of the semantic
	@Field(2) 
	public D3D11_SIGNATURE_PARAMETER_DESC Register(int Register) {
		this.io.setIntField(this, 2, Register);
		return this;
	}
	
	/**
	 * A predefined system value, or D3D_NAME_UNDEFINED if not applicable<br>
	 * C type : D3D_NAME
	 */
	@Field(3) 
	public ValuedEnum<D3D_NAME > SystemValueType() {
		return this.io.getEnumField(this, 3);
	}
	/**
	 * A predefined system value, or D3D_NAME_UNDEFINED if not applicable<br>
	 * C type : D3D_NAME
	 */
	@Field(3) 
	public D3D11_SIGNATURE_PARAMETER_DESC SystemValueType(ValuedEnum<D3D_NAME > SystemValueType) {
		this.io.setEnumField(this, 3, SystemValueType);
		return this;
	}
	/**
	 * Scalar type (e.g. uint, float, etc.)<br>
	 * C type : D3D_REGISTER_COMPONENT_TYPE
	 */
	@Field(4) 
	public ValuedEnum<D3D_REGISTER_COMPONENT_TYPE > ComponentType() {
		return this.io.getEnumField(this, 4);
	}
	/**
	 * Scalar type (e.g. uint, float, etc.)<br>
	 * C type : D3D_REGISTER_COMPONENT_TYPE
	 */
	@Field(4) 
	public D3D11_SIGNATURE_PARAMETER_DESC ComponentType(ValuedEnum<D3D_REGISTER_COMPONENT_TYPE > ComponentType) {
		this.io.setEnumField(this, 4, ComponentType);
		return this;
	}
	/// Mask to indicate which components of the register
	@Field(5) 
	public byte Mask() {
		return this.io.getByteField(this, 5);
	}
	/// Mask to indicate which components of the register
	@Field(5) 
	public D3D11_SIGNATURE_PARAMETER_DESC Mask(byte Mask) {
		this.io.setByteField(this, 5, Mask);
		return this;
	}
	/**
	 * are used (combination of D3D10_COMPONENT_MASK values)<br>
	 * Mask to indicate whether a given component is
	 */
	@Field(6) 
	public byte ReadWriteMask() {
		return this.io.getByteField(this, 6);
	}
	/**
	 * are used (combination of D3D10_COMPONENT_MASK values)<br>
	 * Mask to indicate whether a given component is
	 */
	@Field(6) 
	public D3D11_SIGNATURE_PARAMETER_DESC ReadWriteMask(byte ReadWriteMask) {
		this.io.setByteField(this, 6, ReadWriteMask);
		return this;
	}
	/**
	 * (combination of D3D10_COMPONENT_MASK values)<br>
	 * Stream index
	 */
	@Field(7) 
	public int Stream() {
		return this.io.getIntField(this, 7);
	}
	/**
	 * (combination of D3D10_COMPONENT_MASK values)<br>
	 * Stream index
	 */
	@Field(7) 
	public D3D11_SIGNATURE_PARAMETER_DESC Stream(int Stream) {
		this.io.setIntField(this, 7, Stream);
		return this;
	}
}
